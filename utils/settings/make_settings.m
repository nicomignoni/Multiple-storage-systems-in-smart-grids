% ---- SETTINGS ----function make_settings(options)    arguments        options.DataType string        options.PriceType string    end        T = 24;                                             % Time horizon (hours)    P = 10;                                             % Number of prosumers    S = 8;                                              % Number of storage providers    Sigma    = 0.1 * ones(T);                           % Standard deviation for demand and generation    sigma    = 0.3;                                     % Standard deviation for zeta    zeta_min = 0.05;                                    % Minimum zeta    csi_min  = 0.01;                                    % Minimum csi    csi      = max(csi_min + sigma*randn(1, P), ...                   csi_min);                            % Regularizer coefficient    zeta     = max(zeta_min + sigma*randn(1, S), ...                   zeta_min);                           % Storage degradation    alpha    = 0.98;                                    % Leakage    Eff_ch   = 0.97;                                    % Charging efficiency    Eff_dis  = 1.03;                                    % Disharging efficiency        epsilon  = 0.7;                                     % Discount factor        % Production and demand data:    % - "condo": condominium data (./condo_data/)    % - "access": access economy paper data (./access_economy_data/)    if options.DataType == "access"        load('data/access_economy_data/pv_trend.mat');        load('data/access_economy_data/pd_trend.mat');        DP_max  = 3;                                    % Demand peak        PV_max  = 6;                                    % Generated power peak        avg_PV = PV_max * pv_trend;                     % Average power generation (renewable)        avg_DP = DP_max * pd_trend;                     % Average prosumer demand        PV = max(mvnrnd(avg_PV, Sigma, P), 0);          % Prosumers power generation        DP = max(mvnrnd(avg_DP, Sigma, P), 0);          % Prosumers demand    elseif options.DataType == "condo"        load('data/condo_data/energy_data.mat');        indices = randsample(size(PV, 1), P);                 PV = PV(indices, :);        DP = DP(indices, :);        avg_PV = mean(PV, 1);                           % Average power generation (renewable)        avg_DP = mean(DP, 1);                           % Average prosumer demand    end          std_PV = std(PV, 0, 1);                             % Power generation (renewable) standard deviation                      std_DP = std(DP, 0, 1);                             % Prosumer demand standard deviation        % Buying price curve (Retailer -> Prosumer):    % - "enel": pricing from Enel "E-Light Bioraria" contract    %   (https://www.enel.it/it/luce-e-gas/luce/offerte/e-light-bioraria)    % - "access": price curves from the access economy paper    if options.PriceType == "access"        load('data/access_economy_data/C.mat');         % Buying costs (Retailer -> Prosumer)        R = C.*epsilon;                                 % Selling price (Prosumer -> Retailer)        L = 0.2 * ones(1,T);                            % Storage cost (Prosumer <-> Provider)    elseif options.PriceType == "enel"        fb = 0.0574;                                    % Energy price from 19.00 to 8.00        fo = 0.0774;                                    % Energy price from 8.00 to 19.00        C  = [fb*ones(1,8) fo*ones(1,11) fb*ones(1,5)];         R = C.*epsilon;                                 % Selling price (Prosumer -> Retailer)        L = (C + R) / 2;                                % Storage cost (Prosumer <-> Provider)    end        l_max = 0.7;                                         % Maximum chargable storage price (in case it is a variable)                               p_max  = 10;                                        % Max in-out power traded     d_max  = 10;                                        % Max in-out power stored     q_max  = 10;                                        % Max providers in-out flow    b_max  = randi([20, 30], 1, S);                    % Max battery capacity    b_init = 0*ones(1, S);                             % Initial storage level    s_init = sum(b_init)*ones(1, P)./P;                % Initial battery level        save('settings.mat');